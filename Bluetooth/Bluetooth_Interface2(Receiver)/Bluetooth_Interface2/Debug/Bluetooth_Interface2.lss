
Bluetooth_Interface2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000707  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000615  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000354  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d4  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ed  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000181d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//#define LED PORTB					/* connected LED on PORT pin */

int main(void)
{
	char Data_in;
    DDRB = 0xFF;							/* make PORT as output port */
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  70:	18 ba       	out	0x18, r1	; 24
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
  72:	60 e8       	ldi	r22, 0x80	; 128
  74:	75 e2       	ldi	r23, 0x25	; 37
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	0e 94 4c 00 	call	0x98	; 0x98 <USART_Init>
	while(1)
	{
		Data_in = USART_RxChar();						/* receive data from Bluetooth device*/
		if(Data_in =='1')
		{
			PORTB = 0xFF;
  7e:	cf ef       	ldi	r28, 0xFF	; 255
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
	//LED = 0;
	
	while(1)
	{
		Data_in = USART_RxChar();						/* receive data from Bluetooth device*/
  80:	0e 94 7b 00 	call	0xf6	; 0xf6 <USART_RxChar>
		if(Data_in =='1')
  84:	81 33       	cpi	r24, 0x31	; 49
  86:	11 f4       	brne	.+4      	; 0x8c <main+0x20>
		{
			PORTB = 0xFF;
  88:	c8 bb       	out	0x18, r28	; 24
  8a:	03 c0       	rjmp	.+6      	; 0x92 <main+0x26>
			//LED |= (1<<PB0);							/* Turn ON LED */	
		}
		else if(Data_in =='0')
  8c:	80 33       	cpi	r24, 0x30	; 48
  8e:	09 f4       	brne	.+2      	; 0x92 <main+0x26>
		{
			PORTB = 0x00;
  90:	18 ba       	out	0x18, r1	; 24
			//LED &= ~(1<<PB0);							/* Turn OFF LED */
		}
		USART_TxChar(Data_in);
  92:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_TxChar>
	}		
  96:	f4 cf       	rjmp	.-24     	; 0x80 <main+0x14>

00000098 <USART_Init>:
  98:	1b b8       	out	0x0b, r1	; 11
  9a:	2a b1       	in	r18, 0x0a	; 10
  9c:	28 61       	ori	r18, 0x18	; 24
  9e:	2a b9       	out	0x0a, r18	; 10
  a0:	20 b5       	in	r18, 0x20	; 32
  a2:	26 68       	ori	r18, 0x86	; 134
  a4:	20 bd       	out	0x20, r18	; 32
  a6:	dc 01       	movw	r26, r24
  a8:	cb 01       	movw	r24, r22
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	aa 1f       	adc	r26, r26
  b0:	bb 1f       	adc	r27, r27
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	aa 1f       	adc	r26, r26
  b8:	bb 1f       	adc	r27, r27
  ba:	9c 01       	movw	r18, r24
  bc:	ad 01       	movw	r20, r26
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	44 1f       	adc	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	44 1f       	adc	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	72 e1       	ldi	r23, 0x12	; 18
  d2:	8a e7       	ldi	r24, 0x7A	; 122
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 83 00 	call	0x106	; 0x106 <__udivmodsi4>
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	82 0f       	add	r24, r18
  de:	89 b9       	out	0x09, r24	; 9
  e0:	da 01       	movw	r26, r20
  e2:	c9 01       	movw	r24, r18
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	a1 09       	sbc	r26, r1
  e8:	b1 09       	sbc	r27, r1
  ea:	89 2f       	mov	r24, r25
  ec:	9a 2f       	mov	r25, r26
  ee:	ab 2f       	mov	r26, r27
  f0:	bb 27       	eor	r27, r27
  f2:	80 bd       	out	0x20, r24	; 32
  f4:	08 95       	ret

000000f6 <USART_RxChar>:
  f6:	5f 9b       	sbis	0x0b, 7	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <USART_RxChar>
  fa:	8c b1       	in	r24, 0x0c	; 12
  fc:	08 95       	ret

000000fe <USART_TxChar>:
  fe:	8c b9       	out	0x0c, r24	; 12
 100:	5d 9b       	sbis	0x0b, 5	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <USART_TxChar+0x2>
 104:	08 95       	ret

00000106 <__udivmodsi4>:
 106:	a1 e2       	ldi	r26, 0x21	; 33
 108:	1a 2e       	mov	r1, r26
 10a:	aa 1b       	sub	r26, r26
 10c:	bb 1b       	sub	r27, r27
 10e:	fd 01       	movw	r30, r26
 110:	0d c0       	rjmp	.+26     	; 0x12c <__udivmodsi4_ep>

00000112 <__udivmodsi4_loop>:
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	ee 1f       	adc	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	a2 17       	cp	r26, r18
 11c:	b3 07       	cpc	r27, r19
 11e:	e4 07       	cpc	r30, r20
 120:	f5 07       	cpc	r31, r21
 122:	20 f0       	brcs	.+8      	; 0x12c <__udivmodsi4_ep>
 124:	a2 1b       	sub	r26, r18
 126:	b3 0b       	sbc	r27, r19
 128:	e4 0b       	sbc	r30, r20
 12a:	f5 0b       	sbc	r31, r21

0000012c <__udivmodsi4_ep>:
 12c:	66 1f       	adc	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	88 1f       	adc	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	1a 94       	dec	r1
 136:	69 f7       	brne	.-38     	; 0x112 <__udivmodsi4_loop>
 138:	60 95       	com	r22
 13a:	70 95       	com	r23
 13c:	80 95       	com	r24
 13e:	90 95       	com	r25
 140:	9b 01       	movw	r18, r22
 142:	ac 01       	movw	r20, r24
 144:	bd 01       	movw	r22, r26
 146:	cf 01       	movw	r24, r30
 148:	08 95       	ret

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
