
Bluetooth_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c8  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bd  00000000  00000000  00001112  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000014d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000142  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	
	USART_Init(9600);						/* initialize USART with 9600 baud rate */
  6c:	60 e8       	ldi	r22, 0x80	; 128
  6e:	75 e2       	ldi	r23, 0x25	; 37
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Init>
	
	int power = 0;
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
			power = 1;
		}
		else if(power == 1)
		{
			USART_TxChar('0');
			power = 0;
  7c:	00 e0       	ldi	r16, 0x00	; 0
  7e:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		if(power == 0) 
		{
			USART_TxChar('1');
			power = 1;
  80:	d1 e0       	ldi	r29, 0x01	; 1
  82:	c0 e0       	ldi	r28, 0x00	; 0
	
	int power = 0;
	
	while(1)
	{
		if(power == 0) 
  84:	00 97       	sbiw	r24, 0x00	; 0
  86:	31 f4       	brne	.+12     	; 0x94 <main+0x28>
		{
			USART_TxChar('1');
  88:	81 e3       	ldi	r24, 0x31	; 49
  8a:	0e 94 8b 00 	call	0x116	; 0x116 <USART_TxChar>
			power = 1;
  8e:	8d 2f       	mov	r24, r29
  90:	9c 2f       	mov	r25, r28
  92:	08 c0       	rjmp	.+16     	; 0xa4 <main+0x38>
		}
		else if(power == 1)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	91 05       	cpc	r25, r1
  98:	29 f4       	brne	.+10     	; 0xa4 <main+0x38>
		{
			USART_TxChar('0');
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	0e 94 8b 00 	call	0x116	; 0x116 <USART_TxChar>
			power = 0;
  a0:	80 2f       	mov	r24, r16
  a2:	91 2f       	mov	r25, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	34 e3       	ldi	r19, 0x34	; 52
  a8:	4c e0       	ldi	r20, 0x0C	; 12
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	40 40       	sbci	r20, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
  b6:	e6 cf       	rjmp	.-52     	; 0x84 <main+0x18>

000000b8 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */ 
}
  b8:	1b b8       	out	0x0b, r1	; 11
  ba:	2a b1       	in	r18, 0x0a	; 10
  bc:	28 61       	ori	r18, 0x18	; 24
  be:	2a b9       	out	0x0a, r18	; 10
  c0:	20 b5       	in	r18, 0x20	; 32
  c2:	26 68       	ori	r18, 0x86	; 134
  c4:	20 bd       	out	0x20, r18	; 32
  c6:	dc 01       	movw	r26, r24
  c8:	cb 01       	movw	r24, r22
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	aa 1f       	adc	r26, r26
  d0:	bb 1f       	adc	r27, r27
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	aa 1f       	adc	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	9c 01       	movw	r18, r24
  dc:	ad 01       	movw	r20, r26
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	44 1f       	adc	r20, r20
  e4:	55 1f       	adc	r21, r21
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	44 1f       	adc	r20, r20
  ec:	55 1f       	adc	r21, r21
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	72 e1       	ldi	r23, 0x12	; 18
  f2:	8a e7       	ldi	r24, 0x7A	; 122
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 8f 00 	call	0x11e	; 0x11e <__udivmodsi4>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	82 0f       	add	r24, r18
  fe:	89 b9       	out	0x09, r24	; 9
 100:	da 01       	movw	r26, r20
 102:	c9 01       	movw	r24, r18
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	a1 09       	sbc	r26, r1
 108:	b1 09       	sbc	r27, r1
 10a:	89 2f       	mov	r24, r25
 10c:	9a 2f       	mov	r25, r26
 10e:	ab 2f       	mov	r26, r27
 110:	bb 27       	eor	r27, r27
 112:	80 bd       	out	0x20, r24	; 32
 114:	08 95       	ret

00000116 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
 116:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
 118:	5d 9b       	sbis	0x0b, 5	; 11
 11a:	fe cf       	rjmp	.-4      	; 0x118 <USART_TxChar+0x2>
}
 11c:	08 95       	ret

0000011e <__udivmodsi4>:
 11e:	a1 e2       	ldi	r26, 0x21	; 33
 120:	1a 2e       	mov	r1, r26
 122:	aa 1b       	sub	r26, r26
 124:	bb 1b       	sub	r27, r27
 126:	fd 01       	movw	r30, r26
 128:	0d c0       	rjmp	.+26     	; 0x144 <__udivmodsi4_ep>

0000012a <__udivmodsi4_loop>:
 12a:	aa 1f       	adc	r26, r26
 12c:	bb 1f       	adc	r27, r27
 12e:	ee 1f       	adc	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	a2 17       	cp	r26, r18
 134:	b3 07       	cpc	r27, r19
 136:	e4 07       	cpc	r30, r20
 138:	f5 07       	cpc	r31, r21
 13a:	20 f0       	brcs	.+8      	; 0x144 <__udivmodsi4_ep>
 13c:	a2 1b       	sub	r26, r18
 13e:	b3 0b       	sbc	r27, r19
 140:	e4 0b       	sbc	r30, r20
 142:	f5 0b       	sbc	r31, r21

00000144 <__udivmodsi4_ep>:
 144:	66 1f       	adc	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	88 1f       	adc	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	1a 94       	dec	r1
 14e:	69 f7       	brne	.-38     	; 0x12a <__udivmodsi4_loop>
 150:	60 95       	com	r22
 152:	70 95       	com	r23
 154:	80 95       	com	r24
 156:	90 95       	com	r25
 158:	9b 01       	movw	r18, r22
 15a:	ac 01       	movw	r20, r24
 15c:	bd 01       	movw	r22, r26
 15e:	cf 01       	movw	r24, r30
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
